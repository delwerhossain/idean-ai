import jsPDF from 'jspdf'

export interface DocumentData {
  title: string
  content: string
  type: 'business_plan' | 'executive_summary' | 'marketing_plan'
  clientName?: string
  businessName?: string
  industry?: string
  generatedDate: string
}

export const generatePDF = async (document: DocumentData): Promise<void> => {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  const maxLineWidth = pageWidth - (margin * 2)
  
  let yPosition = margin

  // Add header with business info
  doc.setFontSize(20)
  doc.setFont(undefined, 'bold')
  doc.text(document.title, margin, yPosition)
  yPosition += 15

  if (document.businessName) {
    doc.setFontSize(14)
    doc.setFont(undefined, 'normal')
    doc.text(`Business: ${document.businessName}`, margin, yPosition)
    yPosition += 10
  }

  if (document.clientName) {
    doc.setFontSize(12)
    doc.text(`Prepared for: ${document.clientName}`, margin, yPosition)
    yPosition += 10
  }

  if (document.industry) {
    doc.text(`Industry: ${document.industry}`, margin, yPosition)
    yPosition += 10
  }

  doc.setFontSize(10)
  doc.text(`Generated: ${document.generatedDate}`, margin, yPosition)
  yPosition += 15

  // Add separator line
  doc.setLineWidth(0.5)
  doc.line(margin, yPosition, pageWidth - margin, yPosition)
  yPosition += 15

  // Add content
  doc.setFontSize(12)
  doc.setFont(undefined, 'normal')
  
  // Split content into lines and handle page breaks
  const lines = doc.splitTextToSize(document.content, maxLineWidth)
  
  for (let i = 0; i < lines.length; i++) {
    // Check if we need a new page
    if (yPosition > pageHeight - margin) {
      doc.addPage()
      yPosition = margin
    }
    
    doc.text(lines[i], margin, yPosition)
    yPosition += 7
  }

  // Add footer
  const totalPages = doc.getNumberOfPages()
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i)
    doc.setFontSize(8)
    doc.text(
      `Generated by iDEAN AI - Page ${i} of ${totalPages}`,
      pageWidth - 80,
      pageHeight - 10
    )
  }

  // Save the PDF
  const fileName = `${document.businessName || 'Document'}_${document.type}.pdf`
  doc.save(fileName)
}

export const shareDocument = async (document: DocumentData): Promise<string> => {
  // Generate a shareable URL (in a real app, this would save to a database)
  const shareId = Math.random().toString(36).substring(2, 15)
  const shareUrl = `${window.location.origin}/shared/${shareId}`
  
  // Store document temporarily in localStorage (in production, use a proper backend)
  localStorage.setItem(`shared_${shareId}`, JSON.stringify(document))
  
  // Copy to clipboard
  try {
    await navigator.clipboard.writeText(shareUrl)
    return shareUrl
  } catch (err) {
    console.error('Failed to copy to clipboard:', err)
    return shareUrl
  }
}

export const formatContentForDisplay = (content: string): string => {
  // Convert markdown-like formatting to HTML
  return content
    .replace(/^# (.+)$/gm, '<h1 class="text-2xl font-bold mb-4 mt-6">$1</h1>')
    .replace(/^## (.+)$/gm, '<h2 class="text-xl font-semibold mb-3 mt-5">$1</h2>')
    .replace(/^### (.+)$/gm, '<h3 class="text-lg font-medium mb-2 mt-4">$1</h3>')
    .replace(/^\* (.+)$/gm, '<li class="ml-4">• $1</li>')
    .replace(/^- (.+)$/gm, '<li class="ml-4">• $1</li>')
    .replace(/\n\n/g, '</p><p class="mb-3">')
    .replace(/^/, '<p class="mb-3">')
    .replace(/$/, '</p>')
}

export const downloadAsText = (document: DocumentData): void => {
  const content = `${document.title}\n${'='.repeat(document.title.length)}\n\n${document.content}`
  const blob = new Blob([content], { type: 'text/plain' })
  const url = URL.createObjectURL(blob)
  
  const a = document.createElement('a')
  a.href = url
  a.download = `${document.businessName || 'Document'}_${document.type}.txt`
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}